<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="sqlfilter.Help" xml:space="preserve">
    <value>The SQL filter is a section of SQL that interacts with the database SPROC to do a selection.  This is nearly always a text search, but it can be defined to whatever you wish.  The basic idea is to get the search text from the users then do a SPROC call with this filter.  The tokens in "{" "}" will be replaced with the SessionParam field name.</value>
  </data>
  <data name="sqlfilter.Text" xml:space="preserve">
    <value>SQL Filter</value>
  </data>
  <data name="sqlfilterorder.Text" xml:space="preserve">
    <value>Order SQL Filter </value>
  </data>
  <data name="sqlfilterpayment.Text" xml:space="preserve">
    <value>Payment SQL Filter</value>
  </data>
  <data name="sqlfilterproduct.Text" xml:space="preserve">
    <value>Product SQL Filter </value>
  </data>
  <data name="sqlorderby-article-name-desc.Text" xml:space="preserve">
    <value>Nom &amp;uarr;</value>
  </data>
  <data name="sqlorderby-article-name.Text" xml:space="preserve">
    <value>Nom &amp;darr;</value>
  </data>
  <data name="sqlorderby-article-price-desc.Text" xml:space="preserve">
    <value>Prix &amp;uarr;</value>
  </data>
  <data name="sqlorderby-article-price.Text" xml:space="preserve">
    <value>Prix &amp;darr;</value>
  </data>
  <data name="sqlorderby-article-ref-desc.Text" xml:space="preserve">
    <value>Réf. &amp;uarr;</value>
  </data>
  <data name="sqlorderby-article-ref.Text" xml:space="preserve">
    <value>Réf. &amp;darr;</value>
  </data>
  <data name="sqlorderby.Help" xml:space="preserve">
    <value>A list of SQL order by clauses, this will be used in the "order by" dropdownlist to give different sort order to the product list. &lt;i&gt;  On large databases a index may be required on the table to ensure performace&lt;/i&gt;</value>
  </data>
  <data name="sqlorderby.Text" xml:space="preserve">
    <value>SQL Order By</value>
  </data>
  <data name="sqlorderbyorder.Text" xml:space="preserve">
    <value>SQL OrderBy Order</value>
  </data>
  <data name="sqlorderbyproduct.Text" xml:space="preserve">
    <value>SQL OrderBy Article</value>
  </data>
  <data name="articles.Text" xml:space="preserve">
    <value>Articles</value>
  </data>
  <data name="dashboard.Text" xml:space="preserve">
    <value>Accueil</value>
  </data>
  <data name="rocketdirectoryapi.Text" xml:space="preserve">
    <value>Rocket Directory</value>
  </data>
  <data name="articleadmin.Text" xml:space="preserve">
    <value>Articles</value>
  </data>
  <data name="catalogname.Text" xml:space="preserve">
    <value>Nom du catalogue</value>
  </data>
  <data name="manageremail.Text" xml:space="preserve">
    <value>E-mail Manager</value>
  </data>
  <data name="managerpassword.Text" xml:space="preserve">
    <value>Mote de passe Manager</value>
  </data>
  <data name="newportal.Text" xml:space="preserve">
    <value>Neouveau portail</value>
  </data>
  <data name="keywords.Text" xml:space="preserve">
    <value>Mots clés</value>
  </data>
  <data name="categoryadmin.Text" xml:space="preserve">
    <value>Catégories</value>
  </data>
  <data name="propertiesadmin.Text" xml:space="preserve">
    <value>Propriétés</value>
  </data>
  <data name="home.Text" xml:space="preserve">
    <value>Accueil</value>
  </data>
  <data name="categoryname.Text" xml:space="preserve">
    <value>Nom de la catégorie</value>
  </data>
  <data name="extra.Text" xml:space="preserve">
    <value>Extra</value>
  </data>
  <data name="html.Text" xml:space="preserve">
    <value>HTML</value>
  </data>
  <data name="images.Text" xml:space="preserve">
    <value>Images</value>
  </data>
  <data name="parentcategory.Text" xml:space="preserve">
    <value>Catégorie parente</value>
  </data>
  <data name="ref.Text" xml:space="preserve">
    <value>Réf.</value>
  </data>
  <data name="seo.Text" xml:space="preserve">
    <value>SEO</value>
  </data>
  <data name="summary.Text" xml:space="preserve">
    <value>Résumé</value>
  </data>
  <data name="categories.Text" xml:space="preserve">
    <value>Catégories</value>
  </data>
  <data name="viewtree.Text" xml:space="preserve">
    <value>View Tree</value>
  </data>
  <data name="name.Text" xml:space="preserve">
    <value>Nom</value>
  </data>
  <data name="properties.Text" xml:space="preserve">
    <value>Propriétés</value>
  </data>
  <data name="text.Text" xml:space="preserve">
    <value>Texte</value>
  </data>
  <data name="category.Text" xml:space="preserve">
    <value>Catégorie</value>
  </data>
  <data name="article.Text" xml:space="preserve">
    <value>Article</value>
  </data>
  <data name="all.Text" xml:space="preserve">
    <value>Tous</value>
  </data>
  <data name="content.Text" xml:space="preserve">
    <value>Contenu</value>
  </data>
  <data name="show.Text" xml:space="preserve">
    <value>Afficher</value>
  </data>
  <data name="title.Text" xml:space="preserve">
    <value>Titre</value>
  </data>
  <data name="copy.Text" xml:space="preserve">
    <value>Copier</value>
  </data>
  <data name="catalog.Text" xml:space="preserve">
    <value>Catalogue</value>
  </data>
  <data name="invalidcatalog.Text" xml:space="preserve">
    <value>La paramétrage du catalogue n'a pas été terminé.</value>
  </data>
  <data name="defaultcategory.Text" xml:space="preserve">
    <value>Catégorie par défaut</value>
  </data>
  <data name="htmltext.Text" xml:space="preserve">
    <value>Texte HTML</value>
  </data>
  <data name="richtext.Text" xml:space="preserve">
    <value>Texte riche</value>
  </data>
  <data name="hidden.Text" xml:space="preserve">
    <value>Caché</value>
  </data>
  <data name="staticlist.Text" xml:space="preserve">
    <value>Static List</value>
  </data>
  <data name="sqlorderby-product-name-desc.Text" xml:space="preserve">
    <value>Nom &amp;uarr;</value>
  </data>
  <data name="sqlorderby-product-name.Text" xml:space="preserve">
    <value>Nom &amp;darr;</value>
  </data>
  <data name="sqlorderby-product-price-desc.Text" xml:space="preserve">
    <value>Prix &amp;uarr;</value>
  </data>
  <data name="sqlorderby-product-price.Text" xml:space="preserve">
    <value>Prix &amp;darr;</value>
  </data>
  <data name="sqlorderby-product-ref-desc.Text" xml:space="preserve">
    <value>Ref. &amp;uarr;</value>
  </data>
  <data name="sqlorderby-product-ref.Text" xml:space="preserve">
    <value>Réf. &amp;darr;</value>
  </data>
  <data name="projectname.Text" xml:space="preserve">
    <value>Projet AppTheme</value>
  </data>
  <data name="adminapptheme.Text" xml:space="preserve">
    <value>Admin AppTheme</value>
  </data>
  <data name="propertygroups.Text" xml:space="preserve">
    <value>Groupes de propriété</value>
  </data>
  <data name="contactemail.Text" xml:space="preserve">
    <value>Contact Email</value>
  </data>
  <data name="fromemail.Text" xml:space="preserve">
    <value>De l'email</value>
  </data>
  <data name="settings.Text" xml:space="preserve">
    <value>Paramètres</value>
  </data>
  <data name="property.Text" xml:space="preserve">
    <value>Propriété</value>
  </data>
  <data name="group.Text" xml:space="preserve">
    <value>Groupe</value>
  </data>
  <data name="duplicateref.Text" xml:space="preserve">
    <value>AVERTISSEMENT : La référence existe déjà.  La propriété n'est pas sauvegardée.</value>
  </data>
  <data name="template.Text" xml:space="preserve">
    <value>Modèle</value>
  </data>
  <data name="apptheme.Text" xml:space="preserve">
    <value>AppTheme</value>
  </data>
  <data name="detailpageurl.Text" xml:space="preserve">
    <value>URL de la page de détail</value>
  </data>
  <data name="listpageurl.Text" xml:space="preserve">
    <value>URL de la page de liste</value>
  </data>
  <data name="manualcategoryorderby.Text" xml:space="preserve">
    <value>Catégorie manuelle Commander par</value>
  </data>
  <data name="cmdlistmsg.Text" xml:space="preserve">
    <value>Rechercher dans la base de données tous les articles correspondant aux critères de recherche.</value>
  </data>
  <data name="cmdtemplatemsg.Text" xml:space="preserve">
    <value>Ne recherchez PAS d'articles, utilisez uniquement les données relatives aux catégories et aux paramètres.</value>
  </data>
  <data name="searchpageurl.Text" xml:space="preserve">
    <value>URL de la page de recherche</value>
  </data>
  <data name="detailpage.Text" xml:space="preserve">
    <value>Page de détail</value>
  </data>
  <data name="listpage.Text" xml:space="preserve">
    <value>Page de liste</value>
  </data>
  <data name="checkboxfilterand.Text" xml:space="preserve">
    <value>Les articles doivent figurer dans tous les filtres sélectionnés</value>
  </data>
  <data name="appthememissing.Text" xml:space="preserve">
    <value>Le thème de l'application DOIT être sélectionné</value>
  </data>
  <data name="modulesettings.Text" xml:space="preserve">
    <value>Configuration du module</value>
  </data>
  <data name="setcanonical.Text" xml:space="preserve">
    <value>Pages requises pour les liens canoniques</value>
  </data>
  <data name="searchmoduleid.Text" xml:space="preserve">
    <value>Module de recherche de données</value>
  </data>
  <data name="socialmedia.Text" xml:space="preserve">
    <value>Médias sociaux</value>
  </data>
  <data name="showorderby.Text" xml:space="preserve">
    <value>Afficher OrderBy</value>
  </data>
  <data name="showpagesize.Text" xml:space="preserve">
    <value>Afficher la taille de la page</value>
  </data>
  <data name="dnnsearchextra.Help" xml:space="preserve">
    <value>Champs supplémentaires de données de recherche DNN, définis comme une liste CSV de champs xpath d'articles.</value>
  </data>
  <data name="dnnsearchextra.Text" xml:space="preserve">
    <value>DNN Search xpath</value>
  </data>
  <data name="searchpage.Text" xml:space="preserve">
    <value>Page de recherche</value>
  </data>
  <data name="cachehours.Text" xml:space="preserve">
    <value>Heures de cache</value>
  </data>
  <data name="unlimited.Text" xml:space="preserve">
    <value>Illimité</value>
  </data>
  <data name="clearsearchoncat.Text" xml:space="preserve">
    <value>Effacer le texte de recherche lors de la sélection d'une catégorie</value>
  </data>
  <data name="showsearchtext.Text" xml:space="preserve">
    <value>Afficher le texte de la recherche</value>
  </data>
  <data name="noresults.Text" xml:space="preserve">
    <value>Aucun résultat.</value>
  </data>
  <data name="barcode.Text" xml:space="preserve">
    <value>Code barre</value>
  </data>
  <data name="model.Text" xml:space="preserve">
    <value>Modèle</value>
  </data>
  <data name="models.Text" xml:space="preserve">
    <value>Modèles</value>
  </data>
  <data name="price.Text" xml:space="preserve">
    <value>Prix</value>
  </data>
</root>